# -*- mode: ruby -*-
# vi: set ft=ruby :
Vagrant.configure("2") do |config|
	#set ($counter = 1)
	#set ($hostnameMarker = ".vm.hostname")
	#set ($boxMarker = ".vm.box")
	#set ($boxURLMarker = ".vm.box_url")
	#set ($bootTimeoutMarker = ".vm.boot_timeout")
	#set ($sshUsernameMarker = ".ssh.username")
	#set ($sshPasswordMarker = ".ssh.password")
	#set ($networkIPMarker = ".vm.network")
	#set ($syncFolderMarker = ".vm.synced_folder")
	#set ($manifestsPathMarker = ".manifests_path")
	#set ($manifestFilePathMarker = ".manifest_file")
	#set ($modulePathMarker = ".module_path")
	#set ($portForwardMarker = ".vm.network")
	#set ($providerMarker = ".vm.provider")
	#set ($shellProvisionMarker = ".vm.provision")
	#set ($childStructures = $boxuppConfig)
	#set ($puppetServerMarker = ".puppet_server")
	#set ($puppetNodeMarker = ".puppet_node")
	#set ($puppetOptionMarker = ".options")

	#foreach ($childBean in $childStructures)
		#set($ports = [])
		#set ($folderMappings = $childBean.getSyncFolders())
		#set ($portMappings = $childBean.getPortMappings())	
		#set($dockerLinkContainers = $childBean.getOrmDockerLinks())
		#if($childBean.isPuppetMaster())
		#set($identifier="master")
		#{else}
		#set($identifier=$childBean.vagrantID)
		#end 
	
		config.vm.define "$childBean.vagrantID" do |$identifier|
			$identifier$providerMarker "$childBean.providerType" do |d|
				d.image = "$childBean.dockerImage"
				d.name = "$identifier"
				d.has_ssh= true
				d.volumes << '/var/lib/docker'
				d.vagrant_vagrantfile = "./docker/Vagrantfile"
				#foreach($portMapping in $portMappings)
				#if(!($portMapping.hostPort.isEmpty() && $portMapping.vmPort.isEmpty()))
				#set($localVar = $ports.add("""$portMapping.hostPort : $portMapping.vmPort"""))
				#end	
				#end
				#if(!$portMappings.isEmpty())
				d.ports=$ports
				#end

				#if($puppetMasterMachine)
			
					#if(!($puppetMasterMachine.vagrantID  == $childBean.vagrantID))
					d.link("$puppetMasterMachine.vagrantID : $puppetMasterMachine.hostName")
					#foreach ($dockerLinkContainer in $dockerLinkContainers)
					#foreach($box in $childStructures)
					#if( $dockerLinkContainer.linkedMachineID == $box.machineID)

							d.link("$box.vagrantID : $box.hostName")
						#end	
					#end
				#end

				#end
				#end

			end
			
			$identifier$hostnameMarker = "$childBean.hostName"
			$identifier$sshUsernameMarker = "root"
			$identifier$sshPasswordMarker = "root123"
			
			
			#foreach ($syncMapping in $folderMappings)
				#if(!($syncMapping.hostFolder.isEmpty() && $syncMapping.vmFolder.isEmpty()))
				$identifier$syncFolderMarker "$syncMapping.hostFolder", "$syncMapping.vmFolder"
				#end
			#end
		
			#if($puppetMasterMachine)
			
<<<<<<< HEAD
				#if($puppetMasterMachine.vagrantID  == $childBean.vagrantID)
				
				

					$identifier$syncFolderMarker "manifests", "/etc/puppet/manifests" 
					$identifier$syncFolderMarker "../modules", "/etc/puppet/modules"
					$identifier$shellProvisionMarker "shell" , path: "./scripts/puppetMaster.sh"
					
			#foreach ($innerChildBean in $childStructures)
					#if($puppetMasterMachine.vagrantID  != $innerChildBean.vagrantID)
						
						$identifier$shellProvisionMarker "shell" , inline: "echo $innerChildBean.hostName >> /etc/puppet/autosign.conf"
						
						$identifier$shellProvisionMarker "shell" , inline: "/etc/init.d/puppetmaster start"
					#end
				#end
					   $identifier$shellProvisionMarker  "puppet_server" do |$identifier|

                       $identifier$puppetServerMarker = "$childBean.hostName"
                       $identifier$puppetOptionMarker = "--verbose --debug"
                	end		
			#else

				$identifier$shellProvisionMarker "shell" , path: "./scripts/puppetAgent.sh"
	

				     $identifier$shellProvisionMarker  "puppet_server" do |$identifier|
				     #foreach ($innerChildBean in $childStructures)
				     	#if($puppetMasterMachine.vagrantID  == $innerChildBean.vagrantID)
                         $identifier$puppetServerMarker = "$innerChildBean.hostName"
                         #end
                      #end
                         $identifier$puppetNodeMarker = "$childBean.hostName"

                         $identifier$puppetOptionMarker = "--verbose --debug --waitforcert 60"

                         end
            		#end
            #else

           	 	$identifier$shellProvisionMarker "puppet" do |$identifier|
=======
				$identifier$shellProvisionMarker "puppet" do |$identifier|
>>>>>>> 6f531bc934e3b2d6681b64c4509d519436275e91
					$identifier$manifestsPathMarker = "manifests"
					$identifier$manifestFilePathMarker = "site.pp"
					$identifier$modulePathMarker = "../modules"
				end	
				

			#end
			
					
				
	
				#foreach ($scriptMapping in $scriptMappings)
				#if($scriptMapping.machineConfig.vagrantID == $identifier)
				#foreach($script in $scripts)
				#if($script.scriptName == $scriptMapping.script.scriptName)
				$identifier$shellProvisionMarker "shell", path: "./scripts/$script.scriptName", privileged:"true"
				#end
				#end
				#end
				#end
				
		#set ($counter = $counter + 1)
		end
	#end
end
#*
'$MARKER_NAME are used to set LHS Markers in the vm configuration for setting up
properties like hostname, box, boxURL, network IP etc because Velocity
internally uses the 'dot' notation for referencing attributes
*#